<launch>
  <!-- <env name="ROSCONSOLE_FORMAT" value="[${severity}] [${node}]: ${message}"/>  -->
  <!-- <env name="ROSCONSOLE_CONFIG_FILE" -->
    <!-- value="$(find invite_vision)/config/rosconsole.config"/> -->
  <env name="ROSCONSOLE_FORMAT"
      value="[${severity}] [${node}] [${time}]: ${message}"/>
  
  <!-- The planning and execution components of MoveIt! configured to run -->
  <!-- using the ROS-Industrial interface. -->
  <rosparam command="load" file="$(find invite_motoman_support)/config/joint_names_csda10f.yaml"/>
 
  <!--Load default scene-->
  <arg name="load_scene" default="true"/>
  <!-- Scene objects to load as default -->
  <arg name="scene_file" if="$(arg load_scene)" default="$(find invite_motoman_moveit_config)/scenes/default_scene_objects_coarse_with_drum.scene"/> 
  <!-- the "sim" argument controls whether we connect to a Simulated or Real robot -->
  <!--  - if sim=false, a robot_ip and controller(fs100|dx100) arguments is required -->
  <arg name="sim" default="false" />
  <arg name="sim_grippers" default="$(arg sim)"/>
  <arg name="robot_enable" default="true" />
  <arg name="verbose" default="false" />
  <arg name="robot_ip" unless="$(arg sim)" default="192.168.0.1" doc="IP of controller" />
  <arg name="controller" unless="$(arg sim)" default="fs100" doc="Series of the controller (dx100, fs100)" />
 
  <!-- load the robot_description parameter before launching ROS-I nodes -->
  <include file="$(find invite_motoman_moveit_config)/launch/planning_context.launch" >
    <arg name="load_robot_description" value="true" />
  </include>
 
  <!-- run the robot simulator and action interface nodes -->
  <group if="$(arg sim)">
    <include file="$(find industrial_robot_simulator)/launch/robot_interface_simulator.launch" />
  </group>

  <!-- run the "real robot" interface nodes -->
  <!--   - this typically includes: robot_state, motion_interface, and joint_7_trajectory_action nodes -->
  <group unless="$(arg sim)">
    <include file="$(find invite_motoman_support)/launch/robot_interface_streaming_csda10f.launch" >
      <arg name="robot_ip" value="$(arg robot_ip)"/>
      <arg name="controller" value="$(arg controller)"/>
    </include>
  </group>

   <!-- Start Robotiq grippers control structure -->
  <include file="$(find robotiq_2f_gripper_control)/launch/robotiq_dual_action_server.launch">
    <arg name="sim" value="$(arg sim_grippers)"/>
    <arg name="right_gripper_comport" value="/dev/ttyRobotiq1" unless="$(arg sim_grippers)"/>
    <arg name="left_gripper_comport" value="/dev/ttyRobotiq0" unless="$(arg sim_grippers)"/>
    <arg name="right_gripper_stroke" value="0.085" />
    <arg name="left_gripper_stroke" value="0.085" />
    <arg name="rate" value="90"/>
    <arg name="run_test" value="false"/>
  </include>

  <!-- publish the robot state (tf transforms) -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

  <include file="$(find invite_motoman_moveit_config)/launch/move_group.launch">
    <arg name="publish_monitored_planning_scene" value="true"/>
    <arg name="fake_execution" if="$(arg sim)" value="true"/>
    <arg name="planner" value="ompl" />
  </include>

  <include file="$(find invite_motoman_moveit_config)/launch/moveit_rviz.launch">
    <arg name="config" value="true"/>
    <arg name="verbose" value="$(arg verbose)"/>
  </include>
  
  
  <!--<include file="$(find invite_motoman_moveit_config)/launch/default_warehouse_db.launch" />-->
  
  <!-- Enable robot if requested -->
  <group if="$(arg robot_enable)">
    <include file="$(find invite_motoman_support)/launch/robot_enable.launch" />
  </group>

  <!-- Load default planning scene  -->
  <group if="$(arg load_scene)">
    <!-- Load `scene_file` scene objects for collision checking -->
    <node name="moveit_publish_scene_from_text" pkg="moveit_ros_planning" type="moveit_publish_scene_from_text" args= "$(arg scene_file)"
          output="screen"/>
  </group>

</launch>

